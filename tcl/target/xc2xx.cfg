# SPDX-License-Identifier: GPL-2.0-or-later

# script for xc2xx family

#
# stm32h7 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME xc2xx
}

if { [info exists DUAL_BANK] } {
	set $_CHIPNAME.DUAL_BANK $DUAL_BANK
	unset DUAL_BANK
} else {
	set $_CHIPNAME.DUAL_BANK 0
}

if { [info exists DUAL_CORE] } {
	set $_CHIPNAME.DUAL_CORE $DUAL_CORE
	unset DUAL_CORE
} else {
	set $_CHIPNAME.DUAL_CORE 0
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 128kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x20000
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
	  set _CPUTAPID 0x6ba00477
   } {
      set _CPUTAPID 0x6ba02477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if {[using_jtag]} {
   jtag newtap $_CHIPNAME bs -irlen 5
}


target create $_CHIPNAME.cpu0 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 2

$_CHIPNAME.cpu0 configure -work-area-phys 0x30000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

flash bank $_CHIPNAME.bank0.cpu0 xc2xx 0x10000000 0x400000 0 0 $_CHIPNAME.cpu0
flash bank $_CHIPNAME.bank1.cpu0 xc2xx 0x14000000 0x400000 0 0 $_CHIPNAME.cpu0
flash bank $_CHIPNAME.bank2.cpu0 xc2xx 0x40400000 0x20000  0 0 $_CHIPNAME.cpu0
flash bank $_CHIPNAME.bank3.cpu0 xc2xx 0x40800000 0x20000  0 0 $_CHIPNAME.cpu0
flash bank $_CHIPNAME.bank4.cpu0 xc2xx 0x40c00000 0x4000   0 0 $_CHIPNAME.cpu0

# Make sure that cpu0 is selected
targets $_CHIPNAME.cpu0

adapter speed 4000
adapter_khz 4000

adapter srst delay 100
if {[using_jtag]} {
 jtag_ntrst_delay 100
}



   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
$_CHIPNAME.cpu0 cortex_m reset_config sysresetreq

$_CHIPNAME.cpu0 configure -event examine-end {

}

$_CHIPNAME.cpu0 configure -event reset-init {
	adapter speed 4000
}

# get _CHIPNAME from current target
proc xc2xx_get_chipname {} {
	set t [target current]
	set sep [string last "." $t]
	if {$sep == -1} {
		return $t
	}
	return [string range $t 0 [expr {$sep - 1}]]
}


# like mrw, but with target selection
proc xc2xx_mrw {used_target reg} {
	return [$used_target read_memory $reg 32 1]
}

# like mmw, but with target selection
proc xc2xx_mmw {used_target reg setbits clearbits} {
	set old [xc2xx_mrw $used_target $reg]
	set new [expr {($old & ~$clearbits) | $setbits}]
	$used_target mww $reg $new
}
